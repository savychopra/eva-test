<?php

/**
 * @file
 * Flags access handling: Allow a message to be shown for anonymous users.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\flag\FlagInterface;
use Drupal\flag_anon\FlagAnonLinkBuilder;

/**
 * Implements hook_theme().
 */
function flag_anon_theme($existing, $type, $theme, $path) {
  return [
    'flag_anon_message' => [
      'variables' => [
        'label' => '',
        'message' => '',
        'attributes' => NULL,
        'label_attributes' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function flag_anon_form_flag_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $flag = $form['#flag'];

  if (!($flag instanceof FlagInterface)) {
    return;
  }

  $form['flag_anon'] = [
    '#type' => 'details',
    '#title' => t('Anonymous settings'),
    '#open' => TRUE,
    '#tree' => TRUE,
  ];
  $form['flag_anon']['enabled'] = [
    '#type' => 'checkbox',
    '#title' => t("Show this flag to anonymous users even if they don't have permission to use it."),
    '#default_value' => $flag->getThirdPartySetting('flag_anon', 'enabled', 0),
  ];
  $form['flag_anon']['label_display'] = [
    '#type' => 'radios',
    '#title' => t('Label display'),
    '#default_value' => $flag->getThirdPartySetting('flag_anon', 'label_display', 'original'),
    '#options' => [
      'original' => t('Keep original flag label (show Message on click)'),
      'custom' => t('Show Message instead of flag label'),
    ],
    '#states' => [
      'visible' => [':input[name="flag_anon[enabled]"]' => ['checked' => TRUE]],
    ],
  ];
  $form['flag_anon']['popin_title'] = [
    '#type' => 'textfield',
    '#title' => t('Dialog message title'),
    '#default_value' => $flag->getThirdPartySetting('flag_anon', 'popin_title', 'Attention'),
    '#description' => t('Leave blank to not set dialog title.'),
    '#states' => [
      'visible' => [
        ':input[name="flag_anon[enabled]"]' => ['checked' => TRUE],
        ':input[name="flag_anon[label_display]"]' => ['value' => 'original'],
      ],
    ],
    '#size' => 20,
  ];
  $form['flag_anon']['message'] = [
    '#type' => 'textfield',
    '#title' => t('Message'),
    '#default_value' => $flag->getThirdPartySetting('flag_anon', 'message', '@login or @register to use this flag.'),
    '#description' => t('Placeholders: @login - Login link, @register - Registration link.'),
    '#states' => [
      'visible' => [':input[name="flag_anon[enabled]"]' => ['checked' => TRUE]],
    ],
    '#required' => TRUE,
    '#size' => 100,
  ];
  $form['flag_anon']['login_label'] = [
    '#type' => 'textfield',
    '#title' => t('Login link label'),
    '#default_value' => $flag->getThirdPartySetting('flag_anon', 'login_label', 'Login'),
    '#description' => t('Label for login link used in @login placeholder.'),
    '#states' => [
      'visible' => [':input[name="flag_anon[enabled]"]' => ['checked' => TRUE]],
    ],
    '#required' => TRUE,
    '#size' => 20,
  ];
  $form['flag_anon']['register_label'] = [
    '#type' => 'textfield',
    '#title' => t('Register link label'),
    '#default_value' => $flag->getThirdPartySetting('flag_anon', 'register_label', 'Register'),
    '#description' => t('Label for login link used in @register placeholder.'),
    '#states' => [
      'visible' => [':input[name="flag_anon[enabled]"]' => ['checked' => TRUE]],
    ],
    '#required' => TRUE,
    '#size' => 20,
  ];
  $form['flag_anon']['popup'] = [
    '#type' => 'checkbox',
    '#title' => t("Show Login and Registration form in popup."),
    '#default_value' => $flag->getThirdPartySetting('flag_anon', 'popup', 0),
    '#states' => [
      'visible' => [':input[name="flag_anon[enabled]"]' => ['checked' => TRUE]],
    ],
  ];
  $form['flag_anon']['popup_login'] = [
    '#type' => 'textfield',
    '#title' => t('Login popup settings'),
    '#default_value' => $flag->getThirdPartySetting('flag_anon', 'popup_login', '{"width": "auto"}'),
    '#description' => t('Used for data-dialog-options attribute. Valid JSON should be used like: {"width": "auto"}'),
    '#states' => [
      'visible' => [
        ':input[name="flag_anon[enabled]"]' => ['checked' => TRUE],
        ':input[name="flag_anon[popup]"]' => ['checked' => TRUE],
      ],
    ],
  ];
  $form['flag_anon']['popup_register'] = [
    '#type' => 'textfield',
    '#title' => t('Register popup settings'),
    '#default_value' => $flag->getThirdPartySetting('flag_anon', 'popup_register', '{"width": "auto"}'),
    '#description' => t('Used for data-dialog-options attribute. Valid JSON should be used like: {"width": "auto"}'),
    '#states' => [
      'visible' => [
        ':input[name="flag_anon[enabled]"]' => ['checked' => TRUE],
        ':input[name="flag_anon[popup]"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['#entity_builders'][] = 'flag_anon_form_flag_form_builder';
}

/**
 * Entity form builder for the flag form to map values to third party settings.
 */
function flag_anon_form_flag_form_builder($entity_type, FlagInterface $flag, &$form, FormStateInterface $form_state) {
  $settings = $form_state->getValue('flag_anon', []);

  foreach ($settings as $key => $value) {
    if (!empty($settings['enabled']) && $settings['enabled']) {
      $flag->setThirdPartySetting('flag_anon', $key, $value);
    }
    else {
      $flag->unsetThirdPartySetting('flag_anon', $key);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function flag_anon_form_user_login_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form['#submit'][] = 'flag_anon_set_entity_flagged';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function flag_anon_form_user_register_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form['#submit'][] = 'flag_anon_set_entity_flagged';
}

/**
 * Set entity flagged if related $_GET parameter exists and have correct value.
 */
function flag_anon_set_entity_flagged(array &$form, FormStateInterface $form_state) {
  $param = \Drupal::request()->query->get(FlagAnonLinkBuilder::$flagGetParam);

  if ($param) {
    $param = explode(FlagAnonLinkBuilder::$flagGetParamDelimiter, $param, 2);

    if (count($param) === 2) {
      list($flag_id, $entity_id) = $param;

      /** @var \Drupal\flag\FlagServiceInterface $flag_service */
      $flag_service = \Drupal::service('flag');
      $flag = $flag_service->getFlagById($flag_id);

      if ($flag instanceof FlagInterface) {
        $entity = \Drupal::entityTypeManager()->getStorage($flag->getFlaggableEntityTypeId())->load($entity_id);

        if ($entity instanceof EntityInterface) {
          try {
            $flag_service->flag($flag, $entity);
          }
          catch (\LogicException $e) {
            // @TODO: Error handling.
          }
        }
      }
    }
  }
}
